{"version":3,"sources":["Home.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Home","state","totalItems","size","page","drugs","drugList","items","selectDrugs","searchDrugs","this","getDrugs","axios","get","then","res","status","setState","data","length","slice","pageNumber","openModal","send","e","v","orgName","document","getElementById","value","phoneNumber","obj","JSON","stringify","formData","FormData","append","post","alert","showModal","className","onClick","Input","id","type","onChange","item","drs","newDrugList","i","nomi","toLowerCase","indexOf","push","placeholder","Table","map","some","d","Set","has","delete","add","addDrug","width","activePage","itemsCountPerPage","totalItemsCount","pageRangeDisplayed","handlePageChange","bind","itemClass","linkClass","Modal","isOpen","toggle","ModalHeader","charCode","ModalBody","Form","onSubmit","FormGroup","Label","for","ModalFooter","Button","color","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.85948975.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {Button, Form, FormGroup, Input, Label, Modal, ModalBody, ModalFooter, ModalHeader, Table} from \"reactstrap\";\nimport \"./App.scss\"\nimport axios from \"axios\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Pagination from \"react-js-pagination\";\nimport {TinyButton as ScrollUpButton} from \"react-scroll-up-button\";\n\nclass Home extends Component {\n    componentDidMount() {\n        this.getDrugs()\n    }\n\n    getDrugs() {\n        axios.get(\"https://spravochnikihlos.uz/medikament/get_dorilar.php\").then(res => {\n            // axios.get(\"https://jsonplaceholder.typicode.com/users\").then(res => {\n            if (res.status === 200) {\n                let page = []\n                this.setState({drugList: res.data})\n                if (res.data && res.data.length > 1000) {\n                    page = res.data.slice(0, 1000)\n                } else {\n                    page = res.data\n                }\n                this.setState({drugList: res.data, drugs: page, page: 0, size: 1000, totalItems: res.data.length})\n            }\n        })\n    }\n\n    state = {\n        totalItems: 0,\n        size: 0,\n        page: 0,\n        drugs: [],\n        drugList: [],\n        items: [],\n        selectDrugs: [],\n        searchDrugs: []\n    }\n\n    handlePageChange(pageNumber) {\n        if (pageNumber >= 0) {\n            let page = pageNumber - 1\n            if (this.state.drugList && this.state.drugList.length > this.state.size * (page)) {\n                let size = this.state.size\n                this.setState({drugs: this.state.drugList.slice(page * size, (page * size) + size), page})\n            }\n        }\n    }\n\n    render() {\n        const {openModal} = this.state;\n\n        const send = (e, v) => {\n            let orgName = document.getElementById('orgName').value\n            let phoneNumber = document.getElementById('phoneNumber').value\n            if (orgName && orgName.length > 0 && phoneNumber && phoneNumber.length >= 9) {\n                let obj = [{orgName, phoneNumber, drugs: this.state.items}]\n                obj = JSON.stringify(obj)\n                let formData = new FormData();\n                formData.append('json', obj);\n                axios.post(\"https://spravochnikihlos.uz/ihlos/excel.php\", formData).then(res => {\n                    // if (res.data === 111) {\n                    //     alert(\"Ma'lumot muvaffaqiyatli jo'natildi!\")\n                    // } else {\n                    //     alert(\"Xatolik!\")\n                    // }\n                })\n                alert(\"Ma'lumot muvaffaqiyatli jo'natildi!\")\n                this.setState({openModal: false, items: [], drugs: [], drugList: []})\n                this.getDrugs()\n            } else {\n                alert(\"Bo'sh maydonchalarni to'ldiring!\")\n            }\n        }\n        const showModal = () => {\n            this.setState({openModal: !openModal})\n        }\n        const searchDrugChange = () => {\n            let item = document.getElementById('searchWord').value\n            if (item && item.length > 0) {\n                let drs = this.state.drugList\n                let newDrugList = []\n                for (let i = 0; i < drs.length; i++) {\n                    if (drs[i].nomi.toLowerCase().indexOf(item.toLowerCase()) >= 0) {\n                        newDrugList.push(drs[i])\n                    }\n                }\n                let page = []\n                if (newDrugList && newDrugList.length > 1000) {\n                    page = newDrugList.slice(0, 1000)\n                } else {\n                    page = newDrugList\n                }\n                this.setState({drugList: newDrugList, drugs: page, page: 0, size: 1000, totalItems: newDrugList.length})\n            } else {\n                this.getDrugs()\n            }\n        }\n        const addDrug = (item) => {\n            let drugs = new Set(this.state.items);\n            if (drugs.has(item)) {\n                drugs.delete(item)\n            } else {\n                drugs.add(item)\n            }\n            this.setState({items: [...drugs]})\n        }\n        return (\n            <div className=\"w-100 pt-1\">\n                <div className=\"row mt-2 mx-0\">\n                    <div className=\"col-md-5 col-md-12 mx-auto \">\n                        <div className={\"sticky-top bg-white pt-2\"}>\n                            <div className=\"basket-block text-right mb-3\">\n                                <div className=\"m-2 d-inline mr-auto pr-5\">\n                                    <button className={\"btn btn-success\"}\n                                            onClick={showModal}>Jo'natish <span\n                                        className={\"icon icon-send bg-white\"}></span>\n                                    </button>\n                                </div>\n                                <span className=\"icon icon-cart basket bg-success\"></span>\n                                <div className=\"select-count\">\n                                    <span>{this.state.items && this.state.items.length}</span>\n                                </div>\n                            </div>\n                            <div className=\"\">\n                                <Input className=\"form-control\" id={'searchWord'} type={\"search\"}\n                                       onChange={searchDrugChange} placeholder={\"Qidirish...\"}/>\n                            </div>\n                        </div>\n                        <Table className={\"table-style w-100 table-bordered mt-2\"}>\n                            <thead>\n                            <tr className={\"bg-success text-white\"}>\n                                <th>№</th>\n                                <th>Dori nomi</th>\n                                {/*<th>Tanlash</th>*/}\n                            </tr>\n                            </thead>\n                            <tbody>\n                            {this.state.drugs && this.state.drugs.length > 0 && this.state.drugs.map((item, i) =>\n                                <tr key={i}\n                                    className={\" drug-tr \" + (this.state.items.some(d => d.nomi === item.nomi) ? \" active-tr\" : \"\")}\n                                    onClick={() => addDrug(item)}>\n                                    <td width=\"7%\">{i + 1}</td>\n                                    <td width=\"85%\">{item.nomi}</td>\n                                    {/*<td width=\"5%\">*/}\n                                    {/*    <label className=\"container\">*/}\n                                    {/*        <input type=\"checkbox\"*/}\n                                    {/*               disabled*/}\n                                    {/*            // onClick={() => addDrug(item)}*/}\n                                    {/*               checked={this.state.items.some(d => d.nomi === item.nomi)}/>*/}\n                                    {/*        <span className=\"checkmark\"></span>*/}\n                                    {/*    </label>*/}\n                                    {/*</td>*/}\n                                </tr>\n                            )}\n                            </tbody>\n                        </Table>\n                        <div className=\"text-center page-block mx-auto\">\n                            <Pagination\n                                activePage={this.state.page + 1}\n                                itemsCountPerPage={this.state.size}\n                                totalItemsCount={this.state.totalItems}\n                                pageRangeDisplayed={5}\n                                onChange={this.handlePageChange.bind(this)} itemClass=\"page-item\"\n                                linkClass=\"page-link\"\n                                className={\"text-center mx-auto\"}\n                            />\n                        </div>\n                    </div>\n                    {/*<div className=\"col-md-5 col-md-12 mx-auto \">*/}\n                    {/*    <div className=\"m-2\">*/}\n                    {/*        <button className={\"btn btn-success\"}*/}\n                    {/*                onClick={showModal}>Jo'natish*/}\n                    {/*        </button>*/}\n                    {/*    </div>*/}\n                    {/*    <Table className={\"table-style w-100 mt-2 table-bordered\"}>*/}\n                    {/*        <thead>*/}\n                    {/*        <tr className={\"bg-success text-white\"}>*/}\n                    {/*            <th>№</th>*/}\n                    {/*            <th>Dori nomi</th>*/}\n                    {/*            /!*<th>Tanlash</th>*!/*/}\n                    {/*        </tr>*/}\n                    {/*        </thead>*/}\n                    {/*        <tbody>*/}\n                    {/*        {this.state.items && this.state.items.length > 0 && this.state.items.map((item, i) =>*/}\n                    {/*            <tr key={i}*/}\n                    {/*                onClick={() => addDrug(item)}>*/}\n                    {/*                <td width=\"10%\">{i + 1}</td>*/}\n                    {/*                <td>{item.nomi}</td>*/}\n                    {/*                /!*<td width=\"10%\">*!/*/}\n                    {/*                /!*    <label className=\"container\">*!/*/}\n                    {/*                /!*        <input type=\"checkbox\"*!/*/}\n                    {/*                /!*               disabled*!/*/}\n                    {/*                /!*               checked={this.state.items.some(d => d.nomi === item.nomi)}/>*!/*/}\n                    {/*                /!*        <span className=\"checkmark\"></span>*!/*/}\n                    {/*                /!*    </label>*!/*/}\n                    {/*                /!*</td>*!/*/}\n                    {/*            </tr>*/}\n                    {/*        )}*/}\n                    {/*        </tbody>*/}\n                    {/*    </Table>*/}\n                    {/*</div>*/}\n                </div>\n                <ScrollUpButton/>\n                <Modal isOpen={openModal} toggle={() => showModal(\"\")} className={\"\"}>\n                    <ModalHeader isOpen={openModal} toggle={() => showModal(\"\")}\n                                 charCode=\"X\">Ro'yhatni yuborish</ModalHeader>\n                    <ModalBody>\n                        <Form onSubmit={send}>\n                            <FormGroup>\n                                <Label for=\"exampleEmail\">Firma nomi</Label>\n                                <Input type=\"text\" nomi=\"org\" id=\"orgName\" placeholder=\"\"/>\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"examplePassword\">Telefon raqam</Label>\n                                <Input type=\"tel\" nomi=\"telefon\" id=\"phoneNumber\"\n                                       placeholder=\"\"/>\n                            </FormGroup>\n                        </Form>\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button color={\"success\"} onClick={send}>Jo'natish <span\n                            className={\"icon icon-send bg-white\"}></span></Button>\n                    </ModalFooter>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nHome\n    .propTypes = {};\n\nexport default Home;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Home';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}